AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for tvq-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Handler: app.lambda_handler
    Runtime: python3.8
    Environment:
      Variables:
        META_TABLE: !Ref MetaTable
    Layers:
      - !Ref PythonLayer

Parameters:
  TvqDomain:
    Type: String
    Default: tatviquyen.name.vn

  TvqUsCertArn:
    Type: String

Resources:
  # ==========================
  # Global
  # ==========================

  # Lambda Layer
  PythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: python_layer
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  # Global Meta Table in DynamoDB
  MetaTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Role for all Lambda functions
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: lambdaAccessRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - logs:*
                  - sns:*
                Resource: "*"

  # ACM Certificate
  TvqCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName: !Sub "*.${TvqDomain}"

  # Register Apigw
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  # APIGW Custom domain link
  ApiGatewayCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub "sam.${TvqDomain}"
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref TvqCert

  ApiGatewayMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: TvqCert
    Properties:
      ApiId: !Ref ApiGatewayApi
      DomainName: !Ref ApiGatewayCustomDomain
      Stage: Prod

  # SNS
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "tvq9612@gmail.com"
          Protocol: "email"

  # ==========================
  # Vue App
  # ==========================
  VueBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  VueBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${VueBucket}/*"
      Bucket: !Ref VueBucket

  VueCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        Aliases:
          - !Sub "vue.${TvqDomain}"
        Origins:
          - DomainName: !GetAtt VueBucket.RegionalDomainName
            Id: s3Origin
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: s3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
        ViewerCertificate:
          AcmCertificateArn: !Ref TvqUsCertArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019

  # ==========================
  # App CV Visitor (CV)
  # ==========================
  CVFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cv_visitor/
      Role: !GetAtt LambdaRole.Arn
      Events:
        VisitorCounter:
          Type: Api
          Properties:
            Path: /cv/visitors
            Method: get
            RestApiId:
              Ref: ApiGatewayApi

  # ==========================
  # App Spotify
  # ==========================
  SpotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: spotify/
      Role: !GetAtt LambdaRole.Arn
      Events:
        SpotifyPlaying:
          Type: Api
          Properties:
            Path: /spotify/playing
            Method: get
            RestApiId:
              Ref: ApiGatewayApi

  # ==========================
  # App FB Friend
  # ==========================
  FbFriendTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PrimaryKey:
        Name: fb_id
        Type: String

  FbFriendFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fb_friends/
      Timeout: 900
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          FB_FRIEND_TABLE: !Ref FbFriendTable
          SNS_TOPIC: !Ref SnsTopic
      Events:
        FbFriendCronJob:
          Type: Schedule
          Properties:
            Schedule: cron(00 15 * * ? *) # 22h UTC+7
