AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for tvq-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  TvqDomain:
    Type: String
    Default: tatviquyen.name.vn

Resources:
  # ==========================
  # Global
  # ==========================

  # Global Meta Table in DynamoDB
  MetaTable:
    Type: AWS::Serverless::SimpleTable

  # Role for access Meta Table
  MetaDynamodbRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MetaTable}"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"

  # ACM Certificate
  TvqCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName: !Sub "*.${TvqDomain}"

  # Register Apigw
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  # APIGW Custom domain link
  ApiGatewayCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub "sam.${TvqDomain}"
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref TvqCert

  ApiGatewayMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: TvqCert
    Properties:
      ApiId: !Ref ApiGatewayApi
      DomainName: !Ref ApiGatewayCustomDomain
      Stage: Prod

  # ==========================
  # App CV Visitor (CV)
  # ==========================
  CVFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cv_visitor/
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt MetaDynamodbRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref MetaTable
      Events:
        VisitorCounter:
          Type: Api
          Properties:
            Path: /cv/visitors
            Method: get
            RestApiId:
              Ref: ApiGatewayApi

Output:
  
